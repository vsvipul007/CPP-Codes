class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        //Optimal-2
        ListNode *t1 = headA, *t2 = headB;
        if(t1==NULL || t2 ==NULL) return NULL;
        while(t1!=t2)
        {
              
            if(t1==NULL) t1 = headB;
            else t1=t1->next;
            if(t2==NULL) t2 = headA;
            else t2=t2->next;
        }
        return t1;        
        
        
        //Optimal-1
        // ListNode *t1 = headA, *t2 = headB;
        // int l1=0,l2=0;
        // while(t1!=NULL){
        //     t1=t1->next;
        //     l1++;
        // }
        // while(t2!=NULL)
        // {
        //     t2=t2->next;
        //     l2++;
        // }
        // t1 = headA,t2 = headB;
        // int d;
        // if(l1>l2) 
        // {
        //     d= l1-l2;
        //     while(d--)
        //     {
        //         t1=t1->next;
        //     }
        // }
        // else 
        // {
        //     d = l2-l1;
        //     while(d--)
        //     {
        //         t2=t2->next;
        //     }
        // }
        // while(t1!=NULL && t2!=NULL)
        // {
        //     if(t1==t2) return t1;
        //     t1=t1->next;
        //     t2=t2->next;
        // }
        // return NULL;
        
        
        
        //Better
        // map<ListNode*,int> mp;
        // ListNode *t1 = headA;
        // while(t1!=NULL)
        // {
        //     mp[t1] = 1;
        //     t1 = t1->next;
        // }
        // ListNode *t2 = headB;
        // while(t2!=NULL)
        // {
        //     if(mp[t2]==1) return t2;
        //     t2=t2->next;
        // }
        // return NULL;
        
        
        
        //Brute
        // ListNode *t1 = headA, *t2 = headB;
        // while(t2!=NULL)
        // {
        //     t1 = headA;
        //     while(t1 != NULL)
        //     {
        //         if(t2 == t1) return t1;
        //         t1=t1->next;
        //     }
        //     t2 = t2->next;
        // }
        // return NULL;
    }
};
